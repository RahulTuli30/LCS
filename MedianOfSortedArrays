lass Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        total_length = len(nums1) + len(nums2)
        
        if total_length & 1 :
            return self.find_kth_number(nums1=nums1, nums2=nums2, start1=0, end1=len(nums1), start2=0,                                        end2=len(nums2), k = total_length//2)
        k = total_length // 2
        return (self.find_kth_number(nums1=nums1, nums2=nums2, start1=0, end1=len(nums1), start2=0,                                        end2=len(nums2), k = k) + 
                self.find_kth_number(nums1=nums1, nums2=nums2, start1=0, end1=len(nums1), start2=0,                                       end2=len(nums2), k = k-1)
               ) / 2
    
    def find_kth_number(self, nums1, nums2, start1, end1, start2, end2, k):
        
        if end1 <= start1:
            return nums2[start2 + k]
        if end2 <= start2:
            return nums1[start1 + k]
        
        mid1 = (start1 + end1) // 2
        mid2 = (start2 + end2) // 2
        
        if k > mid1 + mid2 - (start1+ start2):
            if nums1[mid1] > nums2[mid2]:
                return self.find_kth_number(nums1=nums1, nums2=nums2, start1=start1, end1=end1,                                         start2=mid2+1, end2=end2, k = k - (mid2 - start2) -1)
            
            return self.find_kth_number(nums1=nums1, nums2=nums2, start1=mid1 +1, end1=end1,                                            start2=start2,end2=end2, k = k - (mid1 -start1) -1)
        
        if nums1[mid1] > nums2[mid2]:
            return self.find_kth_number(nums1=nums1, nums2=nums2, start1=start1, end1=mid1, start2=start2,                                        end2=end2, k = k)
        
        return self.find_kth_number(nums1=nums1, nums2=nums2, start1=start1, end1=end1, start2=start2,                                        end2=mid2, k = k)
            
